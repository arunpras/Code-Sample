#!/usr/bin/env python3

__author__ = "Arun Manoharan (arun@primediscoveries.com)"

# Note: these diversity score calculations are based on @ericproffitt's
# compute_diversity_score_kmer.py script in PR #39

import csv
import datetime
import os.path
import sys

try:
    import click
    import numpy as np
except ImportError as e:
    sys.exit(
        "Couldn't import required dependencies. Please ensure that a qiime2 "
        "conda environment is activated prior to running this script (use "
        "install/create_conda_envs.sh to create one).\n\n"
        "Original error message: %s" % e)


@click.command()
@click.option('--entropy_file', 'entropy_path', required=True,
              type=click.Path(exists=True, file_okay=True, dir_okay=False,
                              readable=True),
              help="TSV file containing kmer Shannon entropies for merged "
                   "samples. This file is one of the outputs generated by "
                   "merge_samples.py.")
@click.option('--sample_id', required=True,
              help="Sample ID for which to compute a diversity score. This "
                   "sample ID must exist in --entropy_file. The sample's "
                   "entropy will be compared to all other sample entropies in "
                   "the file in order to produce a diversity score.")
@click.option('--output_dir', required=True,
              type=click.Path(exists=False, file_okay=False, dir_okay=True,
                              writable=True),
              help="Output directory in which to write the sample's diversity "
                   "score in TSV format.")
def compute_diversity_score(entropy_path, sample_id, output_dir):
    """Compute diversity score by comparing sample's kmer entropy to baseline.

    Computes a diversity score by comparing a sample's kmer Shannon entropy to
    a set of baseline entropies. The sample's entropy is ranked by computing
    its percentile (presented as a number between 0.0 and 1.0). The sample's
    entropy is also classified as "low", "average", or "high" based on the
    baseline's lower quartile, inner two quartiles, and upper quartile,
    respectively.

    Example usage:

    \b
    python compute_diversity_score.py
        --entropy_file merged_samples/kmers/entropy/6-mers_5000_entropy.tsv
        --sample_id SAMPLEID
        --output_dir diversity_score

    """
    if os.path.exists(output_dir):
        raise click.ClickException(
            "%r directory already exists. Please either remove the directory "
            "and rerun this script or specify a different --output_dir." %
            output_dir)

    os.makedirs(output_dir)

    log = os.path.join(output_dir, 'compute_diversity_score.log')

    # Save pipeline start timestamp for writing to pipeline_completed.log file
    # at end of script.
    pipeline_started = datetime.datetime.now().strftime('%Y-%m-%d:%H:%M:%S')
    log_message("Pipeline execution started.", log)

    # Export a copy of input parameters.
    log_message("Writing file of input parameters started.", log)

    params_log = os.path.join(output_dir, "compute_diversity_score_params.log")
    with open(params_log, 'w') as f:
        f.write("ENTROPY_FILE: %s\n" % entropy_path)
        f.write("SAMPLE_ID: %s\n" % sample_id)
        f.write("OUTPUT_DIR: %s\n" % output_dir)

    log_message("Writing file of input parameters completed.", log)

    log_message("Loading kmer entropy file started.", log)

    entropies = load_kmer_entropy_results(entropy_path)

    if sample_id not in entropies:
        raise click.ClickException(
            "%r file does not contain entropy results for sample %r."
            % (entropy_path, sample_id))

    sample_entropy = entropies.pop(sample_id)
    entropies = np.array(list(entropies.values()))

    log_message("Loading kmer entropy file completed.", log)

    log_message("Comparing sample %r entropy to %d baseline entropies started."
                % (sample_id, len(entropies)), log)

    rank, group = compare_sample_entropy_to_baseline(sample_entropy, entropies)

    log_message("Comparing sample %r entropy to %d baseline entropies "
                "completed." % (sample_id, len(entropies)), log)

    log_message("Saving diversity score started.", log)

    save_diversity_score(rank, group, output_dir)

    log_message("Saving diversity score completed.", log)

    pipeline_completed = datetime.datetime.now().strftime('%Y-%m-%d:%H:%M:%S')
    with open(os.path.join(output_dir, 'pipeline_completed.log'), 'w') as f:
        f.write('%s Pipeline execution started.\n' % pipeline_started)
        f.write('%s Pipeline execution completed.\n' % pipeline_completed)
    log_message("Pipeline execution completed.", log)


def log_message(msg, filepath):
    """Write message with timestamp to log file and also display on stdout.

    Will create log file if it does not already exist.

    """
    if not os.path.exists(filepath):
        with open(filepath, 'w') as f:
            f.write("compute_diversity_score.py log file\n\n")

    msg = '%s %s' % (datetime.datetime.now().strftime('%Y-%m-%d:%H:%M:%S'),
                     msg)
    click.echo(msg)
    with open(filepath, 'a') as f:
        f.write('%s\n' % msg)


# TODO `load_kmer_entropy_results` is similar to the function in
# merge_samples.py. Consider centralizing this code in `util` directory in the
# future.

def load_kmer_entropy_results(entropy_path):
    entropies = {}
    with open(entropy_path, 'r', newline='', encoding='utf-8') as fh:
        tsv_reader = csv.reader(fh, dialect='excel-tab', strict=True)

        header = next(tsv_reader)
        if header != ['sample-id', 'shannon-entropy']:
            raise click.ClickException(
                "%r file does not have the expected header of a kmer entropy "
                "file. Expected column headers are 'sample-id' and "
                "'shannon-entropy'." % entropy_path)

        for row in tsv_reader:
            sample_id, entropy = row

            if sample_id in entropies:
                raise click.ClickException(
                    "%r file has a duplicate sample ID %r. Each sample must "
                    "be unique in the kmer entropy file."
                    % (entropy_path, sample_id))

            entropies[sample_id] = float(entropy)

    return entropies


def compare_sample_entropy_to_baseline(sample_entropy, entropies):
    if len(entropies) == 0:
        raise click.ClickException(
            "There must be at least one baseline entropy to compare this "
            "sample's entropy to.")

    rank = (entropies < sample_entropy).sum() / len(entropies)

    if rank < 0.25:
        group = 'low'
    elif 0.25 <= rank <= 0.75:
        group = 'average'
    else:
        group = 'high'

    return rank, group


def save_diversity_score(rank, group, output_dir):
    output_score_path = os.path.join(output_dir, 'score.tsv')
    with open(output_score_path, 'w', newline='', encoding='utf-8') as fh:
        tsv_writer = csv.writer(fh, dialect='excel-tab', strict=True)

        header = ('value', 'class')
        tsv_writer.writerow(header)

        row = ('{0:.15g}'.format(rank), group)
        tsv_writer.writerow(row)


if __name__ == '__main__':
    compute_diversity_score()
