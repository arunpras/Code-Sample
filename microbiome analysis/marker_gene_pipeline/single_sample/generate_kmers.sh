#!/usr/bin/env bash
set -eo pipefail

# Authors:
#   - Arun Manoharan (arun@primediscoveries.com)
# Created by Arun Manoharan
# Last Updated March 2019 by Arun Manoharan

# This script generates kmers from a single sample's ASV sequences.
#
# The script is a simple wrapper around the kmer pipeline's generate_kmers.py
# script. The script performs some validation and runs the kmer pipeline script
# such that the single-sample kmer results can be merged downstream with
# merge_samples.py.

# Requirements:
#
# - ASV_DIR must contain the output generated by generate_asvs.sh.

# Program requirements:
#     kmer pipeline conda environment (use install/create_conda_envs.sh to create one)

# Script options:
#     --asv_dir ASV_DIR: path to directory containing denoised (ASV) sequences for a single sample [REQUIRED]
#     --KN KN: comma separated pairs of kmer:subsample-size (see generate_kmers.py for details) [REQUIRED]
#     --kmer_pipeline_env KMER_PIPELINE_ENV: kmer pipeline conda environment name [default: 'kmer-pipeline']

# Outputs:
#     ${ASV_DIR}/kmers: directory containing kmers generated from the sample's ASV sequences

# Example usage:
#     bash generate_kmers.sh
#         --asv_dir SAMPLEID/asvs/deblur_single_end_trim_len_150
#         --KN 6:5000

ASV_DIR=""
KN=""
KMER_PIPELINE_ENV="kmer-pipeline"

# https://stackoverflow.com/a/14203146/3776794
while [[ $# -gt 0 ]]; do
    key="${1}"

    case "${key}" in
        --asv_dir)
            ASV_DIR="${2}"
            shift 2
            ;;
        --KN)
            KN="${2}"
            shift 2
            ;;
        --kmer_pipeline_env)
            KMER_PIPELINE_ENV="${2}"
            shift 2
            ;;
        *)
            echo "Error: Unknown option '${key}'. Please see script header for usage instructions."
            exit 1
            ;;
    esac
done

if [ -z "${ASV_DIR}" ]; then
    echo "Error: --asv_dir is a required option."
    exit 1
fi

if [ -z "${KN}" ]; then
    echo "Error: --KN is a required option."
    exit 1
fi

OUTPUT_DIR="${ASV_DIR}/kmers"

if [ -d "${OUTPUT_DIR}" ]; then
  echo "Error: ${OUTPUT_DIR} directory already exists. Please either remove the directory and rerun this script, or specify a different --asv_dir."
  exit 1
fi

mkdir -p ${OUTPUT_DIR}

# Writes message with timestamp to log file and also displays on stdout. Will
# create log file if it doesn't already exist.
function log_message {
    set -eo pipefail

    MSG="${1}"
    SCRIPT_LOG="${OUTPUT_DIR}/generate_kmers.log"

    if [ ! -f "${SCRIPT_LOG}" ]; then
        echo -e "generate_kmers.sh log file\n" > "${SCRIPT_LOG}"
    fi

    echo "$(date +%Y-%m-%d:%H:%M:%S) ${MSG}" | tee -a "${SCRIPT_LOG}"
}

# Save pipeline start timestamp for writing to pipeline_completed.log file at
# end of script.
PIPELINE_STARTED="$(date +%Y-%m-%d:%H:%M:%S)"
log_message "Pipeline execution started."

log_message "Validating ASV directory started."

# Verify that there is exactly one fasta file containing this sample's denoised
# sequences: `denoised/fasta/${SAMPLE_ID}.fasta`. This check is important to
# ensure upstream steps were executed correctly and that we're only generating
# kmers for this single sample.
DENOISED_FASTA_DIR="${ASV_DIR}/denoised/fasta"
SAMPLE_ID="$(basename "$(dirname "$(dirname ${ASV_DIR})")")"

if [ ! -d "${DENOISED_FASTA_DIR}" ]; then
  echo "Error: ${DENOISED_FASTA_DIR} directory doesn't exist. Please run generate_asvs.sh prior to running this script."
  exit 1
fi

if [[ "$(ls -1 "${DENOISED_FASTA_DIR}")" != "${SAMPLE_ID}.fasta" ]]; then
  echo "Error: ${DENOISED_FASTA_DIR} directory must contain a single fasta file named ${SAMPLE_ID}.fasta containing this sample's denoised sequences. Please run generate_asvs.sh prior to running this script."
  exit 1
fi

log_message "Validating ASV directory completed."

# export a copy of input parameters
log_message "Writing file of input parameters started."
PARAMS_LOG="${OUTPUT_DIR}/generate_kmers_params.log"

echo "ASV_DIR: $ASV_DIR" > "${PARAMS_LOG}"
echo "KN: $KN" >> "${PARAMS_LOG}"
echo "KMER_PIPELINE_ENV: $KMER_PIPELINE_ENV" >> "${PARAMS_LOG}"

log_message "Writing file of input parameters completed."

source activate ${KMER_PIPELINE_ENV}

log_message "Generating kmers for sample ${SAMPLE_ID} with --KN ${KN} started."

# Find directory this script is contained in:
# https://stackoverflow.com/a/246128/3776794
REPO_ROOT_DIR="$(dirname "$(dirname "$(cd "$(dirname "${BASH_SOURCE[0]}")" > /dev/null 2>&1 && pwd)")")"
SCRIPT_PATH="${REPO_ROOT_DIR}/lib/kmer_pipeline/generate_kmers.py"

# Using `--cores 1` because the kmer pipeline uses a separate core per file,
# but we're only processing a single file (i.e. sample) here.
python "${SCRIPT_PATH}" \
    --inaddr "${DENOISED_FASTA_DIR}" \
    --out "${OUTPUT_DIR}" \
    --KN "${KN}" \
    --cores 1 \
    --filetype fasta \
    --name "${SAMPLE_ID}"

log_message "Generating kmers for sample ${SAMPLE_ID} with --KN ${KN} completed."

# Deactivate kmer-pipeline conda env.
conda deactivate

PIPELINE_COMPLETED="$(date +%Y-%m-%d:%H:%M:%S)"

echo "${PIPELINE_STARTED} Pipeline execution started." > "${OUTPUT_DIR}/pipeline_completed.log"
echo "${PIPELINE_COMPLETED} Pipeline execution completed." >> "${OUTPUT_DIR}/pipeline_completed.log"
log_message "Pipeline execution completed."
