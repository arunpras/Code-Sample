#!/usr/bin/env bash
set -eo pipefail

# Authors:
#   - Arun Manoharan (arun@primediscoveries.com)
# Created February 2019 by Arun Manoharan
# Last Updated February 2019 by Arun Manoharan

# This script performs taxonomic classification of ASV representative sequences
# using qiime2's naive bayes feature classifier. In addition to classifying
# representative sequences, the script collapses the ASV feature table at
# various taxonomic levels (e.g. creating tables with ASVs grouped at the
# phylum, class, order, etc levels). Each collapsed table contains relative
# abundances.
#
# Either pre-trained or custom qiime2 classifiers may be used. See this page
# for pre-trained classifiers (Greengenes and Silva):
#
# https://docs.qiime2.org/2019.4/data-resources/
#
# See this tutorial for training custom classifiers:
#
# https://docs.qiime2.org/2019.4/tutorials/feature-classifier/
#
# The input to this script should be a directory generated by merge_samples.py.
# This script is not intended to be run on single samples at a time prior to
# merging.

# Requirements:
#
# - MERGED_DIR must contain the output generated by merge_samples.py.
#
# - CLASSIFIER must be trained on reference sequences spanning (at minimum) the
#   ASV sequences' amplicon region. Classifier accuracy may be improved by
#   training on the specific amplified region and sequence length of the ASVs
#   being classified (rather than training on full-length reference sequences).

# Program requirements:
#     qiime2-2019.4 conda environment (use install/create_conda_envs.sh to create one)

# Script options:
#     --merged_dir MERGED_DIR: path to directory generated by merge_samples.py [REQUIRED]
#     --classifier CLASSIFIER: path to trained qiime2 taxonomy classifier in .qza format [REQUIRED]
#     --levels LEVELS: comma-separated list of taxonomic levels to collapse ASVs at [default: 2,3,4,5,6]
#     --level_names LEVEL_NAMES: comma-separated list of names for each of the levels specified in --levels [default: phylum,class,order,family,genus]
#     --threads THREADS: number of threads to use for parallel processes [default: 8]
#     --qiime2_env QIIME2_ENV: qiime2 conda environment name [default: 'qiime2-2019.4']

# Outputs:
#     ${MERGED_DIR}/taxonomy/${CLASSIFIER_NAME}/
#         classify_taxonomy.log: log of commands started and completed during running of this script
#         taxonomy_classifications.qza: taxonomy classifications in qiime2 .qza format
#         level_${LEVEL}_${LEVEL_NAME}: directory for each specified level containing collapsed taxonomy tables
#
# Note: The ${CLASSIFIER_NAME} subdirectory is the input ${CLASSIFIER} filename
# with .qza file extension removed. This allows the script to be rerun with
# different taxonomy classifiers without having to remove existing output
# directories.

# Example usage:
#     bash classify_taxonomy.sh
#         --merged_dir merged_samples
#         --classifier gg-13-8-99-nb-classifier.qza
#         --threads 8

MERGED_DIR=""
CLASSIFIER=""
LEVELS="2,3,4,5,6"
LEVEL_NAMES="phylum,class,order,family,genus"
THREADS="8"
QIIME2_ENV="qiime2-2019.4"

# https://stackoverflow.com/a/14203146/3776794
while [[ $# -gt 0 ]]; do
    key="${1}"

    case "${key}" in
        --merged_dir)
            MERGED_DIR="${2}"
            shift 2
            ;;
        --classifier)
            CLASSIFIER="${2}"
            shift 2
            ;;
        --levels)
            LEVELS="${2}"
            shift 2
            ;;
        --level_names)
            LEVEL_NAMES="${2}"
            shift 2
            ;;
        --threads)
            THREADS="${2}"
            shift 2
            ;;
        --qiime2_env)
            QIIME2_ENV="${2}"
            shift 2
            ;;
        *)
            echo "Error: Unknown option '${key}'. Please see script header for usage instructions."
            exit 1
            ;;
    esac
done

if [ -z "${MERGED_DIR}" ]; then
    echo "Error: --merged_dir is a required option."
    exit 1
fi

if [ -z "${CLASSIFIER}" ]; then
    echo "Error: --classifier is a required option."
    exit 1
fi

# Split comma-separated string into array:
# https://stackoverflow.com/a/918931/3776794
IFS=',' read -ra LEVELS_ARRAY <<< "$LEVELS"
IFS=',' read -ra LEVEL_NAMES_ARRAY <<< "$LEVEL_NAMES"

if [[ ${#LEVELS_ARRAY[@]} -ne ${#LEVEL_NAMES_ARRAY[@]} ]]; then
    echo "Error: --levels and --level_names must have the same number of elements."
    exit 1
fi

CLASSIFIER_NAME="$(basename ${CLASSIFIER} .qza)"
OUTPUT_DIR="${MERGED_DIR}/taxonomy/${CLASSIFIER_NAME}"

if [ -d "${OUTPUT_DIR}" ]; then
  echo "Error: ${OUTPUT_DIR} directory already exists. Please either remove the directory and rerun this script, specify a different --classifier, or specify a different --merged_dir."
  exit 1
fi

mkdir -p ${OUTPUT_DIR}

# Writes message with timestamp to log file and also displays on stdout. Will
# create log file if it doesn't already exist.
function log_message {
    set -eo pipefail

    MSG="${1}"
    SCRIPT_LOG="${OUTPUT_DIR}/classify_taxonomy.log"

    if [ ! -f "${SCRIPT_LOG}" ]; then
        echo -e "classify_taxonomy.sh log file\n" > "${SCRIPT_LOG}"
    fi

    echo "$(date +%Y-%m-%d:%H:%M:%S) ${MSG}" | tee -a "${SCRIPT_LOG}"
}

# Save pipeline start timestamp for writing to pipeline_completed.log file at
# end of script.
PIPELINE_STARTED="$(date +%Y-%m-%d:%H:%M:%S)"
log_message "Pipeline execution started."

# export a copy of input parameters
log_message "Writing file of input parameters started."
PARAMS_LOG="${OUTPUT_DIR}/classify_taxonomy_params.log"

echo "MERGED_DIR: $MERGED_DIR" > "${PARAMS_LOG}"
echo "CLASSIFIER: $CLASSIFIER" >> "${PARAMS_LOG}"
echo "LEVELS: $LEVELS" >> "${PARAMS_LOG}"
echo "LEVEL_NAMES: $LEVEL_NAMES" >> "${PARAMS_LOG}"
echo "THREADS: $THREADS" >> "${PARAMS_LOG}"
echo "QIIME2_ENV: $QIIME2_ENV" >> "${PARAMS_LOG}"

log_message "Writing file of input parameters completed."

source activate ${QIIME2_ENV}

log_message "Classifying ASV representative sequence taxonomy started."

REP_SEQS_PATH="${MERGED_DIR}/asvs/rep_seqs.qza"

qiime feature-classifier classify-sklearn \
    --i-classifier ${CLASSIFIER} \
    --i-reads ${REP_SEQS_PATH} \
    --p-n-jobs ${THREADS} \
    --o-classification ${OUTPUT_DIR}/taxonomy_classifications.qza \
    --verbose \
    2>&1 | tee -a ${OUTPUT_DIR}/q2_feature_classifier_classify_sklearn.log

log_message "Classifying ASV representative sequence taxonomy completed."

FEATURE_TABLE_PATH="${MERGED_DIR}/asvs/feature_table.qza"

for ((i=0;i<${#LEVELS_ARRAY[@]};++i)); do
    LEVEL="${LEVELS_ARRAY[i]}"
    LEVEL_NAME="${LEVEL_NAMES_ARRAY[i]}"
    LEVEL_OUTPUT_DIR="${OUTPUT_DIR}/level_${LEVEL}_${LEVEL_NAME}"

    mkdir "${LEVEL_OUTPUT_DIR}"

    log_message "Collapsing ASVs at taxonomic level ${LEVEL} (${LEVEL_NAME}) started."

    qiime taxa collapse \
        --i-table "${FEATURE_TABLE_PATH}" \
        --i-taxonomy "${OUTPUT_DIR}/taxonomy_classifications.qza" \
        --p-level "${LEVEL}" \
        --o-collapsed-table "${LEVEL_OUTPUT_DIR}/${LEVEL_NAME}_level_table_absolute_abundance.qza" \
        --verbose \
        2>&1 | tee -a ${OUTPUT_DIR}/q2_taxa_collapse.log

    log_message "Collapsing ASVs at taxonomic level ${LEVEL} (${LEVEL_NAME}) completed."

    log_message "Converting collapsed ${LEVEL_NAME} level table to relative abundances started."

    qiime feature-table relative-frequency \
        --i-table "${LEVEL_OUTPUT_DIR}/${LEVEL_NAME}_level_table_absolute_abundance.qza" \
        --o-relative-frequency-table "${LEVEL_OUTPUT_DIR}/${LEVEL_NAME}_level_table.qza" \
        --verbose \
        2>&1 | tee -a ${OUTPUT_DIR}/q2_feature_table_relative_frequency.log

    log_message "Converting collapsed ${LEVEL_NAME} level table to relative abundances completed."
done

# Deactivate qiime2 conda env.
conda deactivate

PIPELINE_COMPLETED="$(date +%Y-%m-%d:%H:%M:%S)"

echo "${PIPELINE_STARTED} Pipeline execution started." > "${OUTPUT_DIR}/pipeline_completed.log"
echo "${PIPELINE_COMPLETED} Pipeline execution completed." >> "${OUTPUT_DIR}/pipeline_completed.log"
log_message "Pipeline execution completed."
